<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.salary.project.salary.mapper.SalaryAllocationMapper">
    
    <resultMap type="com.salary.project.salary.domain.SalaryAllocation" id="SalaryAllocationResult">
        <result property="id"    column="id"    />
        <result property="name"    column="name"    />
        <result property="type"    column="type"    />
        <result property="rule"    column="rule"    />
        <result property="money"    column="money"    />
        <result property="state"    column="state"    />
        <result property="createTime"    column="create_time"    />
        <result property="grade"    column="grade"    />
    </resultMap>

    <sql id="selectSalaryAllocationVo">
        select id, name, type, rule, money, state, create_time, grade from tbl_salary_allocation
    </sql>

    <select id="selectSalaryAllocationList" parameterType="SalaryAllocation" resultMap="SalaryAllocationResult">
        <include refid="selectSalaryAllocationVo"/>
        <where>  
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="type != null  and type != ''"> and type = #{type}</if>
            <if test="rule != null  and rule != ''"> and rule = #{rule}</if>
            <if test="money != null "> and money = #{money}</if>
            <if test="state != null  and state != ''"> and state = #{state}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
        </where>
    </select>
    
    <select id="selectSalaryAllocationById" parameterType="Long" resultMap="SalaryAllocationResult">
        <include refid="selectSalaryAllocationVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertSalaryAllocation" parameterType="SalaryAllocation" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_salary_allocation
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">name,</if>
            <if test="type != null">type,</if>
            <if test="rule != null">rule,</if>
            <if test="money != null">money,</if>
            <if test="state != null">state,</if>
            <if test="createTime != null">create_time,</if>
            <if test="grade != null">grade,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">#{name},</if>
            <if test="type != null">#{type},</if>
            <if test="rule != null">#{rule},</if>
            <if test="money != null">#{money},</if>
            <if test="state != null">#{state},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="grade != null">#{grade},</if>
         </trim>
    </insert>

    <update id="updateSalaryAllocation" parameterType="SalaryAllocation">
        update tbl_salary_allocation
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="type != null">type = #{type},</if>
            <if test="rule != null">rule = #{rule},</if>
            <if test="money != null">money = #{money},</if>
            <if test="state != null">state = #{state},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="grade != null">grade = #{grade},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteSalaryAllocationById" parameterType="Long">
        delete from tbl_salary_allocation where id = #{id}
    </delete>

    <delete id="deleteSalaryAllocationByIds" parameterType="String">
        delete from tbl_salary_allocation where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>